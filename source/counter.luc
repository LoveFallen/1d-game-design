module counter (
    input clk,       // clock
    input rst,       // reset
    input buttonU,    // button input
    input buttonD,
    input buttonL,
    input buttonR,
    input buttonY,
    input buttonN,
    output countUp,  // press counter
    output countDown,
    output countLeft,
    output countRight,
    output countYes,
    output countNo    
  ) {
   
  .clk(clk) {
    edge_detector edge_detector1(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector2(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector3(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector4(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector5(#RISE(1), #FALL(0)); // detect rising edges
    edge_detector edge_detector6(#RISE(1), #FALL(0)); // detect rising edges
    button_conditioner button_cond1;
    button_conditioner button_cond2;
    button_conditioner button_cond3;
    button_conditioner button_cond4;
    button_conditioner button_cond5;
    button_conditioner button_cond6;
     
    .rst(rst) {
       dff ctrup; // our lovely counter
       dff ctrdown;
       dff ctrleft;
       dff ctrright;
       dff ctryes;
       dff ctrno;      
    }
  }
 
  always {
    button_cond1.in = buttonU;            // raw button input
    edge_detector1.in = button_cond1.out; // input to the edge_detector
    button_cond2.in = buttonD;            // raw button input
    edge_detector2.in = button_cond2.out; // input to the edge_detector
    button_cond3.in = buttonL;            // raw button input
    edge_detector3.in = button_cond3.out; // input to the edge_detector
    button_cond4.in = buttonR;            // raw button input
    edge_detector4.in = button_cond4.out; // input to the edge_detector
    button_cond5.in = buttonY;            // raw button input
    edge_detector5.in = button_cond5.out; // input to the edge_detector
    button_cond6.in = buttonN;            // raw button input
    edge_detector6.in = button_cond6.out; // input to the edge_detector
    countUp = ctrup.q;             
    countDown = ctrdown.q;
    countLeft = ctrleft.q;
    countRight = ctrright.q;
    countYes = ctryes.q;
    countNo = ctrno.q;

    if (edge_detector1.out) {    // if edge detected
      ctrup.d = 1;       // add one to the counter
    } else {
      ctrup.d = 0;
    }
    if (edge_detector2.out) {    // if edge detected
      ctrdown.d = 1;       // add one to the counter
    } else {
      ctrdown.d = 0;
    }
    if (edge_detector3.out) {    // if edge detected
      ctrleft.d = 1;       // add one to the counter
    } else {
      ctrleft.d = 0;
    }
    if (edge_detector4.out) {    // if edge detected
      ctrright.d = 1;       // add one to the counter
    } else {
      ctrright.d = 0;
    }
    if (edge_detector5.out) {    // if edge detected
      ctryes.d = 1;       // add one to the counter
    } else {
      ctryes.d = 0;
    }
    if (edge_detector6.out) {    // if edge detected
      ctrno.d = 1;       // add one to the counter
    } else {
      ctrno.d = 0;
    }
  }
}