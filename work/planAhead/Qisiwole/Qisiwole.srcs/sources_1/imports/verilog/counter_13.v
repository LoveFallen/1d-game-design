/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module counter_13 (
    input clk,
    input rst,
    input buttonU,
    input buttonD,
    input buttonL,
    input buttonR,
    input buttonY,
    input buttonN,
    output reg countUp,
    output reg countDown,
    output reg countLeft,
    output reg countRight,
    output reg countYes,
    output reg countNo
  );
  
  
  
  wire [1-1:0] M_edge_detector1_out;
  reg [1-1:0] M_edge_detector1_in;
  edge_detector_14 edge_detector1 (
    .clk(clk),
    .in(M_edge_detector1_in),
    .out(M_edge_detector1_out)
  );
  wire [1-1:0] M_edge_detector2_out;
  reg [1-1:0] M_edge_detector2_in;
  edge_detector_14 edge_detector2 (
    .clk(clk),
    .in(M_edge_detector2_in),
    .out(M_edge_detector2_out)
  );
  wire [1-1:0] M_edge_detector3_out;
  reg [1-1:0] M_edge_detector3_in;
  edge_detector_14 edge_detector3 (
    .clk(clk),
    .in(M_edge_detector3_in),
    .out(M_edge_detector3_out)
  );
  wire [1-1:0] M_edge_detector4_out;
  reg [1-1:0] M_edge_detector4_in;
  edge_detector_14 edge_detector4 (
    .clk(clk),
    .in(M_edge_detector4_in),
    .out(M_edge_detector4_out)
  );
  wire [1-1:0] M_edge_detector5_out;
  reg [1-1:0] M_edge_detector5_in;
  edge_detector_14 edge_detector5 (
    .clk(clk),
    .in(M_edge_detector5_in),
    .out(M_edge_detector5_out)
  );
  wire [1-1:0] M_edge_detector6_out;
  reg [1-1:0] M_edge_detector6_in;
  edge_detector_14 edge_detector6 (
    .clk(clk),
    .in(M_edge_detector6_in),
    .out(M_edge_detector6_out)
  );
  wire [1-1:0] M_button_cond1_out;
  reg [1-1:0] M_button_cond1_in;
  button_conditioner_20 button_cond1 (
    .clk(clk),
    .in(M_button_cond1_in),
    .out(M_button_cond1_out)
  );
  wire [1-1:0] M_button_cond2_out;
  reg [1-1:0] M_button_cond2_in;
  button_conditioner_20 button_cond2 (
    .clk(clk),
    .in(M_button_cond2_in),
    .out(M_button_cond2_out)
  );
  wire [1-1:0] M_button_cond3_out;
  reg [1-1:0] M_button_cond3_in;
  button_conditioner_20 button_cond3 (
    .clk(clk),
    .in(M_button_cond3_in),
    .out(M_button_cond3_out)
  );
  wire [1-1:0] M_button_cond4_out;
  reg [1-1:0] M_button_cond4_in;
  button_conditioner_20 button_cond4 (
    .clk(clk),
    .in(M_button_cond4_in),
    .out(M_button_cond4_out)
  );
  wire [1-1:0] M_button_cond5_out;
  reg [1-1:0] M_button_cond5_in;
  button_conditioner_20 button_cond5 (
    .clk(clk),
    .in(M_button_cond5_in),
    .out(M_button_cond5_out)
  );
  wire [1-1:0] M_button_cond6_out;
  reg [1-1:0] M_button_cond6_in;
  button_conditioner_20 button_cond6 (
    .clk(clk),
    .in(M_button_cond6_in),
    .out(M_button_cond6_out)
  );
  reg M_ctrup_d, M_ctrup_q = 1'h0;
  reg M_ctrdown_d, M_ctrdown_q = 1'h0;
  reg M_ctrleft_d, M_ctrleft_q = 1'h0;
  reg M_ctrright_d, M_ctrright_q = 1'h0;
  reg M_ctryes_d, M_ctryes_q = 1'h0;
  reg M_ctrno_d, M_ctrno_q = 1'h0;
  
  always @* begin
    M_ctrright_d = M_ctrright_q;
    M_ctrdown_d = M_ctrdown_q;
    M_ctrno_d = M_ctrno_q;
    M_ctrleft_d = M_ctrleft_q;
    M_ctrup_d = M_ctrup_q;
    M_ctryes_d = M_ctryes_q;
    
    M_button_cond1_in = buttonU;
    M_edge_detector1_in = M_button_cond1_out;
    M_button_cond2_in = buttonD;
    M_edge_detector2_in = M_button_cond2_out;
    M_button_cond3_in = buttonL;
    M_edge_detector3_in = M_button_cond3_out;
    M_button_cond4_in = buttonR;
    M_edge_detector4_in = M_button_cond4_out;
    M_button_cond5_in = buttonY;
    M_edge_detector5_in = M_button_cond5_out;
    M_button_cond6_in = buttonN;
    M_edge_detector6_in = M_button_cond6_out;
    countUp = M_ctrup_q;
    countDown = M_ctrdown_q;
    countLeft = M_ctrleft_q;
    countRight = M_ctrright_q;
    countYes = M_ctryes_q;
    countNo = M_ctrno_q;
    if (M_edge_detector1_out) begin
      M_ctrup_d = 1'h1;
    end else begin
      M_ctrup_d = 1'h0;
    end
    if (M_edge_detector2_out) begin
      M_ctrdown_d = 1'h1;
    end else begin
      M_ctrdown_d = 1'h0;
    end
    if (M_edge_detector3_out) begin
      M_ctrleft_d = 1'h1;
    end else begin
      M_ctrleft_d = 1'h0;
    end
    if (M_edge_detector4_out) begin
      M_ctrright_d = 1'h1;
    end else begin
      M_ctrright_d = 1'h0;
    end
    if (M_edge_detector5_out) begin
      M_ctryes_d = 1'h1;
    end else begin
      M_ctryes_d = 1'h0;
    end
    if (M_edge_detector6_out) begin
      M_ctrno_d = 1'h1;
    end else begin
      M_ctrno_d = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_ctrup_q <= 1'h0;
      M_ctrdown_q <= 1'h0;
      M_ctrleft_q <= 1'h0;
      M_ctrright_q <= 1'h0;
      M_ctryes_q <= 1'h0;
      M_ctrno_q <= 1'h0;
    end else begin
      M_ctrup_q <= M_ctrup_d;
      M_ctrdown_q <= M_ctrdown_d;
      M_ctrleft_q <= M_ctrleft_d;
      M_ctrright_q <= M_ctrright_d;
      M_ctryes_q <= M_ctryes_d;
      M_ctrno_q <= M_ctrno_d;
    end
  end
  
endmodule
