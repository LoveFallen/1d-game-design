/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input ledout,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input buttonU,
    input buttonD,
    input buttonL,
    input buttonR,
    input buttonY,
    input buttonN,
    output reg a,
    output reg b,
    output reg c,
    output reg g_01,
    output reg g_02,
    output reg b_01,
    output reg b_02,
    output reg r_01,
    output reg r_02,
    output reg led_clk,
    output reg oe,
    output reg lat
  );
  
  
  
  reg rst;
  
  reg [511:0] M_arrayr_d, M_arrayr_q = 1'h0;
  
  reg [511:0] M_arrayg_d, M_arrayg_q = 1'h0;
  
  reg [511:0] M_arrayb_d, M_arrayb_q = 1'h0;
  
  reg [2:0] M_stage_d, M_stage_q = 1'h1;
  
  reg [63:0] M_number_d, M_number_q = 1'h0;
  
  reg [3:0] M_selected_d, M_selected_q = 1'h0;
  
  reg [5:0] M_score_d, M_score_q = 1'h0;
  
  reg [3:0] M_pointer_d, M_pointer_q = 1'h0;
  
  reg [24:0] M_counterQ_d, M_counterQ_q = 1'h0;
  
  reg [15:0] M_lightUp_d, M_lightUp_q = 16'hffff;
  
  reg [15:0] M_lightDown_d, M_lightDown_q = 1'h0;
  
  reg temp;
  
  reg up;
  
  reg down;
  
  reg left;
  
  reg right;
  
  reg yes;
  
  reg no;
  
  integer i;
  
  integer j;
  
  integer l;
  
  wire [512-1:0] M_start_place;
  starting_screen_1 start (
    .place(M_start_place)
  );
  
  wire [512-1:0] M_right_dis_out;
  reg [3-1:0] M_right_dis_level;
  right_display_2 right_dis (
    .level(M_right_dis_level),
    .out(M_right_dis_out)
  );
  
  wire [24-1:0] M_test_out;
  reg [64-1:0] M_test_array;
  comparator_3 test (
    .array(M_test_array),
    .out(M_test_out)
  );
  
  wire [1-1:0] M_buttonPush_up;
  wire [1-1:0] M_buttonPush_down;
  wire [1-1:0] M_buttonPush_right;
  wire [1-1:0] M_buttonPush_left;
  wire [1-1:0] M_buttonPush_yes;
  wire [1-1:0] M_buttonPush_no;
  reg [1-1:0] M_buttonPush_buttonU;
  reg [1-1:0] M_buttonPush_buttonD;
  reg [1-1:0] M_buttonPush_buttonL;
  reg [1-1:0] M_buttonPush_buttonR;
  reg [1-1:0] M_buttonPush_buttonY;
  reg [1-1:0] M_buttonPush_buttonN;
  pushB_4 buttonPush (
    .clk(clk),
    .rst(rst),
    .buttonU(M_buttonPush_buttonU),
    .buttonD(M_buttonPush_buttonD),
    .buttonL(M_buttonPush_buttonL),
    .buttonR(M_buttonPush_buttonR),
    .buttonY(M_buttonPush_buttonY),
    .buttonN(M_buttonPush_buttonN),
    .up(M_buttonPush_up),
    .down(M_buttonPush_down),
    .right(M_buttonPush_right),
    .left(M_buttonPush_left),
    .yes(M_buttonPush_yes),
    .no(M_buttonPush_no)
  );
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_5 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  localparam START_state = 3'd0;
  localparam INITIALIZE_state = 3'd1;
  localparam STEP1_state = 3'd2;
  localparam STEP2_state = 3'd3;
  localparam SWAP_state = 3'd4;
  localparam CHECK_state = 3'd5;
  localparam FINISH_state = 3'd6;
  localparam END_state = 3'd7;
  
  reg [2:0] M_state_d, M_state_q = START_state;
  wire [1-1:0] M_oka_red2;
  wire [1-1:0] M_oka_green2;
  wire [1-1:0] M_oka_blue2;
  wire [1-1:0] M_oka_red1;
  wire [1-1:0] M_oka_green1;
  wire [1-1:0] M_oka_blue1;
  wire [1-1:0] M_oka_oe;
  wire [1-1:0] M_oka_lat;
  wire [1-1:0] M_oka_clock;
  wire [1-1:0] M_oka_a_1;
  wire [1-1:0] M_oka_c_1;
  wire [1-1:0] M_oka_b_1;
  reg [512-1:0] M_oka_r;
  reg [512-1:0] M_oka_g;
  reg [512-1:0] M_oka_b;
  display_6 oka (
    .clk(clk),
    .rst(rst),
    .r(M_oka_r),
    .g(M_oka_g),
    .b(M_oka_b),
    .red2(M_oka_red2),
    .green2(M_oka_green2),
    .blue2(M_oka_blue2),
    .red1(M_oka_red1),
    .green1(M_oka_green1),
    .blue1(M_oka_blue1),
    .oe(M_oka_oe),
    .lat(M_oka_lat),
    .clock(M_oka_clock),
    .a_1(M_oka_a_1),
    .c_1(M_oka_c_1),
    .b_1(M_oka_b_1)
  );
  wire [64-1:0] M_init_array;
  wire [1-1:0] M_init_score;
  wire [1-1:0] M_init_out;
  reg [3-1:0] M_init_stage;
  initialize_7 init (
    .clk(clk),
    .rst(rst),
    .stage(M_init_stage),
    .array(M_init_array),
    .score(M_init_score),
    .out(M_init_out)
  );
  wire [64-1:0] M_switcher_newNumberArray;
  reg [4-1:0] M_switcher_location1;
  reg [4-1:0] M_switcher_location2;
  reg [64-1:0] M_switcher_numberArray;
  switcher_8 switcher (
    .clk(clk),
    .rst(rst),
    .location1(M_switcher_location1),
    .location2(M_switcher_location2),
    .numberArray(M_switcher_numberArray),
    .newNumberArray(M_switcher_newNumberArray)
  );
  
  always @* begin
    M_state_d = M_state_q;
    M_selected_d = M_selected_q;
    M_lightUp_d = M_lightUp_q;
    M_score_d = M_score_q;
    M_lightDown_d = M_lightDown_q;
    M_pointer_d = M_pointer_q;
    M_number_d = M_number_q;
    M_arrayg_d = M_arrayg_q;
    M_arrayb_d = M_arrayb_q;
    M_stage_d = M_stage_q;
    M_counterQ_d = M_counterQ_q;
    M_arrayr_d = M_arrayr_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_init_stage = M_stage_q;
    M_switcher_numberArray = M_number_q;
    M_switcher_location1 = M_selected_q;
    M_switcher_location2 = M_pointer_q;
    M_test_array = M_number_q;
    M_buttonPush_buttonU = buttonU;
    M_buttonPush_buttonD = buttonD;
    M_buttonPush_buttonL = buttonL;
    M_buttonPush_buttonR = buttonR;
    M_buttonPush_buttonY = buttonY;
    M_buttonPush_buttonN = buttonN;
    up = M_buttonPush_up;
    down = M_buttonPush_down;
    left = M_buttonPush_left;
    right = M_buttonPush_right;
    yes = M_buttonPush_yes;
    no = M_buttonPush_no;
    M_right_dis_level = 1'h0;
    M_init_stage = M_stage_q;
    
    case (M_state_q)
      START_state: begin
        M_arrayb_d = M_start_place;
        M_arrayg_d = M_start_place;
        M_arrayr_d = M_start_place;
        if (up == 1'h1 || down == 1'h1 || left == 1'h1 || yes == 1'h1 || no == 1'h1 || right == 1'h1) begin
          M_state_d = INITIALIZE_state;
        end else begin
          M_state_d = M_state_q;
        end
      end
      INITIALIZE_state: begin
        for (l = 1'h0; l < 5'h10; l = l + 1) begin
          M_arrayb_d[(l)*32+31-:32] = 32'h00000000;
          M_arrayg_d[(l)*32+31-:32] = 32'h00000000;
          M_arrayr_d[(l)*32+31-:32] = 32'h00000000;
        end
        M_right_dis_level = M_stage_q;
        M_number_d = M_init_array;
        M_state_d = STEP1_state;
      end
      STEP1_state: begin
        M_right_dis_level = M_stage_q;
        M_arrayb_d = M_right_dis_out;
        M_arrayg_d = M_right_dis_out;
        M_arrayr_d = M_right_dis_out;
        if (M_counterQ_q >= 24'h800000) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h0;
        end else begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
        end
        if (up == 1'h1 && M_pointer_q >= 3'h4) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q - 3'h4;
        end
        if (left == 1'h1 && M_pointer_q != 4'h0 && M_pointer_q != 4'h4 && M_pointer_q != 4'h8 && M_pointer_q != 4'hc) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q - 1'h1;
        end
        if (right == 1'h1 && M_pointer_q != 4'h3 && M_pointer_q != 4'h7 && M_pointer_q != 4'hb && M_pointer_q != 4'hf) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q + 1'h1;
        end
        if (down == 1'h1 && M_pointer_q < 4'hc) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q + 3'h4;
        end
        M_counterQ_d = M_counterQ_q + 1'h1;
        if (yes == 1'h1) begin
          M_selected_d = M_pointer_q;
          M_lightDown_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h0;
          M_state_d = STEP2_state;
        end
        M_test_array = M_number_q;
        M_arrayg_d[0+3+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[0+4+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[32+3+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[32+4+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[0+7+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[32+7+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[0+8+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[32+8+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[0+11+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[32+11+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[0+12+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[32+12+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[64+1+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[96+1+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[64+2+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[96+2+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[64+5+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[96+5+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[64+6+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[96+6+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[64+9+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[96+9+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[64+10+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[96+10+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[64+13+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[96+13+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[64+14+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[96+14+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[128+3+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[160+3+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[128+4+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[160+4+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[128+7+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[160+7+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[128+8+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[160+8+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[128+11+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[160+11+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[128+12+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[160+12+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[192+1+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[192+2+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[480+1+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[480+2+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[192+5+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[192+6+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[480+5+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[480+6+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[192+9+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[192+10+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[480+9+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[480+10+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[192+13+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[192+14+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[480+13+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[480+14+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[256+3+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[288+3+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[256+4+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[288+4+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[256+7+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[288+7+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[256+8+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[288+8+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[256+11+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[288+11+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[256+12+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[288+12+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[320+1+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[352+1+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[320+2+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[352+2+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[320+5+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[352+5+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[320+6+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[352+6+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[320+9+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[352+9+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[320+10+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[352+10+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[320+13+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[352+13+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[320+14+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[352+14+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[384+3+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[416+3+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[384+4+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[416+4+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[384+7+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+7+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[384+8+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+8+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[384+11+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+11+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[384+12+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+12+0-:1] = M_test_out[22+0-:1];
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          M_arrayr_d[224+(i)*1+0-:1] = 1'h1;
          M_arrayg_d[224+(i)*1+0-:1] = 1'h1;
          M_arrayr_d[448+(i)*1+0-:1] = 1'h1;
          M_arrayg_d[448+(i)*1+0-:1] = 1'h1;
          M_arrayr_d[(i)*32+0+0-:1] = 1'h1;
          M_arrayg_d[(i)*32+0+0-:1] = 1'h1;
          M_arrayr_d[(i)*32+15+0-:1] = 1'h1;
          M_arrayg_d[(i)*32+15+0-:1] = 1'h1;
        end
        for (j = 1'h0; j < 2'h2; j = j + 1) begin
          M_arrayb_d[0+(1'h1 + j)*1+0-:1] = M_lightUp_q[0+0-:1];
          M_arrayb_d[0+(3'h5 + j)*1+0-:1] = M_lightUp_q[1+0-:1];
          M_arrayb_d[0+(4'h9 + j)*1+0-:1] = M_lightUp_q[2+0-:1];
          M_arrayb_d[0+(4'hd + j)*1+0-:1] = M_lightUp_q[3+0-:1];
          M_arrayb_d[32+(1'h1 + j)*1+0-:1] = M_lightUp_q[0+0-:1];
          M_arrayb_d[32+(3'h5 + j)*1+0-:1] = M_lightUp_q[1+0-:1];
          M_arrayb_d[32+(4'h9 + j)*1+0-:1] = M_lightUp_q[2+0-:1];
          M_arrayb_d[32+(4'hd + j)*1+0-:1] = M_lightUp_q[3+0-:1];
          M_arrayb_d[128+(1'h1 + j)*1+0-:1] = M_lightUp_q[4+0-:1];
          M_arrayb_d[128+(3'h5 + j)*1+0-:1] = M_lightUp_q[5+0-:1];
          M_arrayb_d[128+(4'h9 + j)*1+0-:1] = M_lightUp_q[6+0-:1];
          M_arrayb_d[128+(4'hd + j)*1+0-:1] = M_lightUp_q[7+0-:1];
          M_arrayb_d[160+(1'h1 + j)*1+0-:1] = M_lightUp_q[4+0-:1];
          M_arrayb_d[160+(3'h5 + j)*1+0-:1] = M_lightUp_q[5+0-:1];
          M_arrayb_d[160+(4'h9 + j)*1+0-:1] = M_lightUp_q[6+0-:1];
          M_arrayb_d[160+(4'hd + j)*1+0-:1] = M_lightUp_q[7+0-:1];
          M_arrayb_d[256+(1'h1 + j)*1+0-:1] = M_lightUp_q[8+0-:1];
          M_arrayb_d[256+(3'h5 + j)*1+0-:1] = M_lightUp_q[9+0-:1];
          M_arrayb_d[256+(4'h9 + j)*1+0-:1] = M_lightUp_q[10+0-:1];
          M_arrayb_d[256+(4'hd + j)*1+0-:1] = M_lightUp_q[11+0-:1];
          M_arrayb_d[288+(1'h1 + j)*1+0-:1] = M_lightUp_q[8+0-:1];
          M_arrayb_d[288+(3'h5 + j)*1+0-:1] = M_lightUp_q[9+0-:1];
          M_arrayb_d[288+(4'h9 + j)*1+0-:1] = M_lightUp_q[10+0-:1];
          M_arrayb_d[288+(4'hd + j)*1+0-:1] = M_lightUp_q[11+0-:1];
          M_arrayb_d[384+(1'h1 + j)*1+0-:1] = M_lightUp_q[12+0-:1];
          M_arrayb_d[384+(3'h5 + j)*1+0-:1] = M_lightUp_q[13+0-:1];
          M_arrayb_d[384+(4'h9 + j)*1+0-:1] = M_lightUp_q[14+0-:1];
          M_arrayb_d[384+(4'hd + j)*1+0-:1] = M_lightUp_q[15+0-:1];
          M_arrayb_d[416+(1'h1 + j)*1+0-:1] = M_lightUp_q[12+0-:1];
          M_arrayb_d[416+(3'h5 + j)*1+0-:1] = M_lightUp_q[13+0-:1];
          M_arrayb_d[416+(4'h9 + j)*1+0-:1] = M_lightUp_q[14+0-:1];
          M_arrayb_d[416+(4'hd + j)*1+0-:1] = M_lightUp_q[15+0-:1];
          M_arrayr_d[0+(1'h1 + j)*1+0-:1] = M_lightDown_q[0+0-:1];
          M_arrayr_d[0+(3'h5 + j)*1+0-:1] = M_lightDown_q[1+0-:1];
          M_arrayr_d[0+(4'h9 + j)*1+0-:1] = M_lightDown_q[2+0-:1];
          M_arrayr_d[0+(4'hd + j)*1+0-:1] = M_lightDown_q[3+0-:1];
          M_arrayr_d[32+(1'h1 + j)*1+0-:1] = M_lightDown_q[0+0-:1];
          M_arrayr_d[32+(3'h5 + j)*1+0-:1] = M_lightDown_q[1+0-:1];
          M_arrayr_d[32+(4'h9 + j)*1+0-:1] = M_lightDown_q[2+0-:1];
          M_arrayr_d[32+(4'hd + j)*1+0-:1] = M_lightDown_q[3+0-:1];
          M_arrayr_d[128+(1'h1 + j)*1+0-:1] = M_lightDown_q[4+0-:1];
          M_arrayr_d[128+(3'h5 + j)*1+0-:1] = M_lightDown_q[5+0-:1];
          M_arrayr_d[128+(4'h9 + j)*1+0-:1] = M_lightDown_q[6+0-:1];
          M_arrayr_d[128+(4'hd + j)*1+0-:1] = M_lightDown_q[7+0-:1];
          M_arrayr_d[160+(1'h1 + j)*1+0-:1] = M_lightDown_q[4+0-:1];
          M_arrayr_d[160+(3'h5 + j)*1+0-:1] = M_lightDown_q[5+0-:1];
          M_arrayr_d[160+(4'h9 + j)*1+0-:1] = M_lightDown_q[6+0-:1];
          M_arrayr_d[160+(4'hd + j)*1+0-:1] = M_lightDown_q[7+0-:1];
          M_arrayr_d[256+(1'h1 + j)*1+0-:1] = M_lightDown_q[8+0-:1];
          M_arrayr_d[256+(3'h5 + j)*1+0-:1] = M_lightDown_q[9+0-:1];
          M_arrayr_d[256+(4'h9 + j)*1+0-:1] = M_lightDown_q[10+0-:1];
          M_arrayr_d[256+(4'hd + j)*1+0-:1] = M_lightDown_q[11+0-:1];
          M_arrayr_d[288+(1'h1 + j)*1+0-:1] = M_lightDown_q[8+0-:1];
          M_arrayr_d[288+(3'h5 + j)*1+0-:1] = M_lightDown_q[9+0-:1];
          M_arrayr_d[288+(4'h9 + j)*1+0-:1] = M_lightDown_q[10+0-:1];
          M_arrayr_d[288+(4'hd + j)*1+0-:1] = M_lightDown_q[11+0-:1];
          M_arrayr_d[384+(1'h1 + j)*1+0-:1] = M_lightDown_q[12+0-:1];
          M_arrayr_d[384+(3'h5 + j)*1+0-:1] = M_lightDown_q[13+0-:1];
          M_arrayr_d[384+(4'h9 + j)*1+0-:1] = M_lightDown_q[14+0-:1];
          M_arrayr_d[384+(4'hd + j)*1+0-:1] = M_lightDown_q[15+0-:1];
          M_arrayr_d[416+(1'h1 + j)*1+0-:1] = M_lightDown_q[12+0-:1];
          M_arrayr_d[416+(3'h5 + j)*1+0-:1] = M_lightDown_q[13+0-:1];
          M_arrayr_d[416+(4'h9 + j)*1+0-:1] = M_lightDown_q[14+0-:1];
          M_arrayr_d[416+(4'hd + j)*1+0-:1] = M_lightDown_q[15+0-:1];
        end
      end
      STEP2_state: begin
        M_right_dis_level = M_stage_q;
        M_arrayb_d = M_right_dis_out;
        M_arrayg_d = M_right_dis_out;
        M_arrayr_d = M_right_dis_out;
        if (M_counterQ_q >= 24'h800000) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h0;
        end else begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
        end
        if (up == 1'h1 && M_pointer_q >= 3'h4) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q - 3'h4;
        end
        if (left == 1'h1 && M_pointer_q != 4'h0 && M_pointer_q != 4'h4 && M_pointer_q != 4'h8 && M_pointer_q != 4'hc) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q - 1'h1;
        end
        if (right == 1'h1 && M_pointer_q != 4'h3 && M_pointer_q != 4'h7 && M_pointer_q != 4'hb && M_pointer_q != 4'hf) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q + 1'h1;
        end
        if (down == 1'h1 && M_pointer_q < 4'hc) begin
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_pointer_d = M_pointer_q + 3'h4;
        end
        M_counterQ_d = M_counterQ_q + 1'h1;
        if (yes == 1'h1 && M_selected_q != M_pointer_q) begin
          M_state_d = SWAP_state;
          M_lightDown_d[(M_selected_q)*1+0-:1] = 1'h0;
          M_lightUp_d[(M_selected_q)*1+0-:1] = 1'h1;
        end
        if (no == 1'h1) begin
          M_selected_d = 1'h0;
          M_lightDown_d[(M_pointer_q)*1+0-:1] = 1'h1;
          M_lightUp_d[(M_pointer_q)*1+0-:1] = 1'h0;
          M_state_d = STEP1_state;
        end
        M_test_array = M_number_q;
        M_arrayg_d[0+3+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[0+4+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[32+3+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[32+4+0-:1] = M_test_out[0+0-:1];
        M_arrayg_d[0+7+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[32+7+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[0+8+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[32+8+0-:1] = M_test_out[1+0-:1];
        M_arrayg_d[0+11+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[32+11+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[0+12+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[32+12+0-:1] = M_test_out[2+0-:1];
        M_arrayg_d[64+1+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[96+1+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[64+2+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[96+2+0-:1] = M_test_out[3+0-:1];
        M_arrayg_d[64+5+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[96+5+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[64+6+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[96+6+0-:1] = M_test_out[4+0-:1];
        M_arrayg_d[64+9+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[96+9+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[64+10+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[96+10+0-:1] = M_test_out[5+0-:1];
        M_arrayg_d[64+13+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[96+13+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[64+14+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[96+14+0-:1] = M_test_out[6+0-:1];
        M_arrayg_d[128+3+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[160+3+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[128+4+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[160+4+0-:1] = M_test_out[7+0-:1];
        M_arrayg_d[128+7+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[160+7+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[128+8+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[160+8+0-:1] = M_test_out[8+0-:1];
        M_arrayg_d[128+11+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[160+11+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[128+12+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[160+12+0-:1] = M_test_out[9+0-:1];
        M_arrayg_d[192+1+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[192+2+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[480+1+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[480+2+0-:1] = M_test_out[10+0-:1];
        M_arrayg_d[192+5+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[192+6+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[480+5+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[480+6+0-:1] = M_test_out[11+0-:1];
        M_arrayg_d[192+9+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[192+10+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[480+9+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[480+10+0-:1] = M_test_out[12+0-:1];
        M_arrayg_d[192+13+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[192+14+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[480+13+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[480+14+0-:1] = M_test_out[13+0-:1];
        M_arrayg_d[256+3+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[288+3+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[256+4+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[288+4+0-:1] = M_test_out[14+0-:1];
        M_arrayg_d[256+7+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[288+7+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[256+8+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[288+8+0-:1] = M_test_out[15+0-:1];
        M_arrayg_d[256+11+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[288+11+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[256+12+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[288+12+0-:1] = M_test_out[16+0-:1];
        M_arrayg_d[320+1+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[352+1+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[320+2+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[352+2+0-:1] = M_test_out[17+0-:1];
        M_arrayg_d[320+5+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[352+5+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[320+6+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[352+6+0-:1] = M_test_out[18+0-:1];
        M_arrayg_d[320+9+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[352+9+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[320+10+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[352+10+0-:1] = M_test_out[19+0-:1];
        M_arrayg_d[320+13+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[352+13+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[320+14+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[352+14+0-:1] = M_test_out[20+0-:1];
        M_arrayg_d[384+3+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[416+3+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[384+4+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[416+4+0-:1] = M_test_out[21+0-:1];
        M_arrayg_d[384+7+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+7+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[384+8+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+8+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[384+11+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+11+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[384+12+0-:1] = M_test_out[22+0-:1];
        M_arrayg_d[416+12+0-:1] = M_test_out[22+0-:1];
        for (i = 1'h0; i < 5'h10; i = i + 1) begin
          M_arrayr_d[224+(i)*1+0-:1] = 1'h1;
          M_arrayg_d[224+(i)*1+0-:1] = 1'h1;
          M_arrayr_d[448+(i)*1+0-:1] = 1'h1;
          M_arrayg_d[448+(i)*1+0-:1] = 1'h1;
          M_arrayr_d[(i)*32+0+0-:1] = 1'h1;
          M_arrayg_d[(i)*32+0+0-:1] = 1'h1;
          M_arrayr_d[(i)*32+15+0-:1] = 1'h1;
          M_arrayg_d[(i)*32+15+0-:1] = 1'h1;
        end
        for (j = 1'h0; j < 2'h2; j = j + 1) begin
          M_arrayb_d[0+(1'h1 + j)*1+0-:1] = M_lightUp_q[0+0-:1];
          M_arrayb_d[0+(3'h5 + j)*1+0-:1] = M_lightUp_q[1+0-:1];
          M_arrayb_d[0+(4'h9 + j)*1+0-:1] = M_lightUp_q[2+0-:1];
          M_arrayb_d[0+(4'hd + j)*1+0-:1] = M_lightUp_q[3+0-:1];
          M_arrayb_d[32+(1'h1 + j)*1+0-:1] = M_lightUp_q[0+0-:1];
          M_arrayb_d[32+(3'h5 + j)*1+0-:1] = M_lightUp_q[1+0-:1];
          M_arrayb_d[32+(4'h9 + j)*1+0-:1] = M_lightUp_q[2+0-:1];
          M_arrayb_d[32+(4'hd + j)*1+0-:1] = M_lightUp_q[3+0-:1];
          M_arrayb_d[128+(1'h1 + j)*1+0-:1] = M_lightUp_q[4+0-:1];
          M_arrayb_d[128+(3'h5 + j)*1+0-:1] = M_lightUp_q[5+0-:1];
          M_arrayb_d[128+(4'h9 + j)*1+0-:1] = M_lightUp_q[6+0-:1];
          M_arrayb_d[128+(4'hd + j)*1+0-:1] = M_lightUp_q[7+0-:1];
          M_arrayb_d[160+(1'h1 + j)*1+0-:1] = M_lightUp_q[4+0-:1];
          M_arrayb_d[160+(3'h5 + j)*1+0-:1] = M_lightUp_q[5+0-:1];
          M_arrayb_d[160+(4'h9 + j)*1+0-:1] = M_lightUp_q[6+0-:1];
          M_arrayb_d[160+(4'hd + j)*1+0-:1] = M_lightUp_q[7+0-:1];
          M_arrayb_d[256+(1'h1 + j)*1+0-:1] = M_lightUp_q[8+0-:1];
          M_arrayb_d[256+(3'h5 + j)*1+0-:1] = M_lightUp_q[9+0-:1];
          M_arrayb_d[256+(4'h9 + j)*1+0-:1] = M_lightUp_q[10+0-:1];
          M_arrayb_d[256+(4'hd + j)*1+0-:1] = M_lightUp_q[11+0-:1];
          M_arrayb_d[288+(1'h1 + j)*1+0-:1] = M_lightUp_q[8+0-:1];
          M_arrayb_d[288+(3'h5 + j)*1+0-:1] = M_lightUp_q[9+0-:1];
          M_arrayb_d[288+(4'h9 + j)*1+0-:1] = M_lightUp_q[10+0-:1];
          M_arrayb_d[288+(4'hd + j)*1+0-:1] = M_lightUp_q[11+0-:1];
          M_arrayb_d[384+(1'h1 + j)*1+0-:1] = M_lightUp_q[12+0-:1];
          M_arrayb_d[384+(3'h5 + j)*1+0-:1] = M_lightUp_q[13+0-:1];
          M_arrayb_d[384+(4'h9 + j)*1+0-:1] = M_lightUp_q[14+0-:1];
          M_arrayb_d[384+(4'hd + j)*1+0-:1] = M_lightUp_q[15+0-:1];
          M_arrayb_d[416+(1'h1 + j)*1+0-:1] = M_lightUp_q[12+0-:1];
          M_arrayb_d[416+(3'h5 + j)*1+0-:1] = M_lightUp_q[13+0-:1];
          M_arrayb_d[416+(4'h9 + j)*1+0-:1] = M_lightUp_q[14+0-:1];
          M_arrayb_d[416+(4'hd + j)*1+0-:1] = M_lightUp_q[15+0-:1];
          M_arrayr_d[0+(1'h1 + j)*1+0-:1] = M_lightDown_q[0+0-:1];
          M_arrayr_d[0+(3'h5 + j)*1+0-:1] = M_lightDown_q[1+0-:1];
          M_arrayr_d[0+(4'h9 + j)*1+0-:1] = M_lightDown_q[2+0-:1];
          M_arrayr_d[0+(4'hd + j)*1+0-:1] = M_lightDown_q[3+0-:1];
          M_arrayr_d[32+(1'h1 + j)*1+0-:1] = M_lightDown_q[0+0-:1];
          M_arrayr_d[32+(3'h5 + j)*1+0-:1] = M_lightDown_q[1+0-:1];
          M_arrayr_d[32+(4'h9 + j)*1+0-:1] = M_lightDown_q[2+0-:1];
          M_arrayr_d[32+(4'hd + j)*1+0-:1] = M_lightDown_q[3+0-:1];
          M_arrayr_d[128+(1'h1 + j)*1+0-:1] = M_lightDown_q[4+0-:1];
          M_arrayr_d[128+(3'h5 + j)*1+0-:1] = M_lightDown_q[5+0-:1];
          M_arrayr_d[128+(4'h9 + j)*1+0-:1] = M_lightDown_q[6+0-:1];
          M_arrayr_d[128+(4'hd + j)*1+0-:1] = M_lightDown_q[7+0-:1];
          M_arrayr_d[160+(1'h1 + j)*1+0-:1] = M_lightDown_q[4+0-:1];
          M_arrayr_d[160+(3'h5 + j)*1+0-:1] = M_lightDown_q[5+0-:1];
          M_arrayr_d[160+(4'h9 + j)*1+0-:1] = M_lightDown_q[6+0-:1];
          M_arrayr_d[160+(4'hd + j)*1+0-:1] = M_lightDown_q[7+0-:1];
          M_arrayr_d[256+(1'h1 + j)*1+0-:1] = M_lightDown_q[8+0-:1];
          M_arrayr_d[256+(3'h5 + j)*1+0-:1] = M_lightDown_q[9+0-:1];
          M_arrayr_d[256+(4'h9 + j)*1+0-:1] = M_lightDown_q[10+0-:1];
          M_arrayr_d[256+(4'hd + j)*1+0-:1] = M_lightDown_q[11+0-:1];
          M_arrayr_d[288+(1'h1 + j)*1+0-:1] = M_lightDown_q[8+0-:1];
          M_arrayr_d[288+(3'h5 + j)*1+0-:1] = M_lightDown_q[9+0-:1];
          M_arrayr_d[288+(4'h9 + j)*1+0-:1] = M_lightDown_q[10+0-:1];
          M_arrayr_d[288+(4'hd + j)*1+0-:1] = M_lightDown_q[11+0-:1];
          M_arrayr_d[384+(1'h1 + j)*1+0-:1] = M_lightDown_q[12+0-:1];
          M_arrayr_d[384+(3'h5 + j)*1+0-:1] = M_lightDown_q[13+0-:1];
          M_arrayr_d[384+(4'h9 + j)*1+0-:1] = M_lightDown_q[14+0-:1];
          M_arrayr_d[384+(4'hd + j)*1+0-:1] = M_lightDown_q[15+0-:1];
          M_arrayr_d[416+(1'h1 + j)*1+0-:1] = M_lightDown_q[12+0-:1];
          M_arrayr_d[416+(3'h5 + j)*1+0-:1] = M_lightDown_q[13+0-:1];
          M_arrayr_d[416+(4'h9 + j)*1+0-:1] = M_lightDown_q[14+0-:1];
          M_arrayr_d[416+(4'hd + j)*1+0-:1] = M_lightDown_q[15+0-:1];
        end
      end
      SWAP_state: begin
        M_selected_d = 1'h0;
        M_number_d = M_switcher_newNumberArray;
        M_state_d = CHECK_state;
      end
      CHECK_state: begin
        M_score_d = M_score_q - 1'h1;
        if (M_test_out == 24'hffffff) begin
          M_state_d = FINISH_state;
        end else begin
          M_state_d = STEP1_state;
        end
      end
      FINISH_state: begin
        if (M_stage_q == 3'h5) begin
          M_state_d = END_state;
        end else begin
          M_state_d = INITIALIZE_state;
          M_init_stage = M_stage_q + 1'h1;
          M_stage_d = M_stage_q + 1'h1;
        end
      end
      END_state: begin
        for (l = 1'h0; l < 5'h10; l = l + 1) begin
          M_arrayb_d[(l)*32+31-:32] = 32'h00000000;
          M_arrayg_d[(l)*32+31-:32] = 32'h00000000;
          M_arrayr_d[(l)*32+31-:32] = 32'h00000000;
        end
      end
      default: begin
        for (l = 1'h0; l < 5'h10; l = l + 1) begin
          M_arrayb_d[(l)*32+31-:32] = 32'h00000000;
          M_arrayg_d[(l)*32+31-:32] = 32'h00000000;
          M_arrayr_d[(l)*32+31-:32] = 32'h00000000;
        end
        M_stage_d = M_stage_q;
      end
    endcase
    M_oka_r = M_arrayr_q;
    M_oka_g = M_arrayg_q;
    M_oka_b = M_arrayb_q;
    lat = M_oka_lat;
    oe = M_oka_oe;
    r_01 = M_oka_red1;
    g_01 = M_oka_green1;
    b_01 = M_oka_blue1;
    r_02 = M_oka_red2;
    g_02 = M_oka_green2;
    b_02 = M_oka_blue2;
    a = M_oka_a_1;
    b = M_oka_b_1;
    c = M_oka_c_1;
    led_clk = M_oka_clock;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counterQ_q <= 1'h0;
    end else begin
      M_counterQ_q <= M_counterQ_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_arrayr_q <= M_arrayr_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_lightDown_q <= 1'h0;
    end else begin
      M_lightDown_q <= M_lightDown_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_pointer_q <= 1'h0;
    end else begin
      M_pointer_q <= M_pointer_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_lightUp_q <= 16'hffff;
    end else begin
      M_lightUp_q <= M_lightUp_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_stage_q <= 1'h1;
    end else begin
      M_stage_q <= M_stage_d;
    end
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_state_q <= 1'h0;
    end else begin
      M_state_q <= M_state_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_arrayg_q <= M_arrayg_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_score_q <= 1'h0;
    end else begin
      M_score_q <= M_score_d;
    end
  end
  
  
  always @(posedge clk) begin
    M_number_q <= M_number_d;
  end
  
  
  always @(posedge clk) begin
    M_arrayb_q <= M_arrayb_d;
  end
  
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_selected_q <= 1'h0;
    end else begin
      M_selected_q <= M_selected_d;
    end
  end
  
endmodule
