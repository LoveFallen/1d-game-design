/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module comparator_3 (
    output reg [23:0] out,
    input [63:0] array
  );
  
  
  
  wire [6-1:0] M_alu1_aluop;
  wire [8-1:0] M_alu1_c;
  wire [8-1:0] M_alu1_x;
  wire [8-1:0] M_alu1_y;
  reg [8-1:0] M_alu1_a;
  reg [8-1:0] M_alu1_b;
  reg [6-1:0] M_alu1_alufn;
  alu_9 alu1 (
    .a(M_alu1_a),
    .b(M_alu1_b),
    .alufn(M_alu1_alufn),
    .aluop(M_alu1_aluop),
    .c(M_alu1_c),
    .x(M_alu1_x),
    .y(M_alu1_y)
  );
  
  wire [6-1:0] M_alu2_aluop;
  wire [8-1:0] M_alu2_c;
  wire [8-1:0] M_alu2_x;
  wire [8-1:0] M_alu2_y;
  reg [8-1:0] M_alu2_a;
  reg [8-1:0] M_alu2_b;
  reg [6-1:0] M_alu2_alufn;
  alu_9 alu2 (
    .a(M_alu2_a),
    .b(M_alu2_b),
    .alufn(M_alu2_alufn),
    .aluop(M_alu2_aluop),
    .c(M_alu2_c),
    .x(M_alu2_x),
    .y(M_alu2_y)
  );
  
  wire [6-1:0] M_alu3_aluop;
  wire [8-1:0] M_alu3_c;
  wire [8-1:0] M_alu3_x;
  wire [8-1:0] M_alu3_y;
  reg [8-1:0] M_alu3_a;
  reg [8-1:0] M_alu3_b;
  reg [6-1:0] M_alu3_alufn;
  alu_9 alu3 (
    .a(M_alu3_a),
    .b(M_alu3_b),
    .alufn(M_alu3_alufn),
    .aluop(M_alu3_aluop),
    .c(M_alu3_c),
    .x(M_alu3_x),
    .y(M_alu3_y)
  );
  
  wire [6-1:0] M_alu4_aluop;
  wire [8-1:0] M_alu4_c;
  wire [8-1:0] M_alu4_x;
  wire [8-1:0] M_alu4_y;
  reg [8-1:0] M_alu4_a;
  reg [8-1:0] M_alu4_b;
  reg [6-1:0] M_alu4_alufn;
  alu_9 alu4 (
    .a(M_alu4_a),
    .b(M_alu4_b),
    .alufn(M_alu4_alufn),
    .aluop(M_alu4_aluop),
    .c(M_alu4_c),
    .x(M_alu4_x),
    .y(M_alu4_y)
  );
  
  reg [7:0] tempOut1;
  
  reg [7:0] tempOut2;
  
  always @* begin
    M_alu1_a = array[56+3-:4];
    M_alu1_b = 1'h1;
    M_alu1_alufn = 6'h00;
    tempOut1 = M_alu1_c;
    M_alu2_a = array[60+3-:4];
    M_alu2_b = tempOut1;
    M_alu2_alufn = 6'h33;
    tempOut2 = M_alu2_c;
    if (tempOut2[0+0-:1] == 1'h1) begin
      out[23+0-:1] = 1'h1;
    end else begin
      out[23+0-:1] = 1'h0;
    end
    M_alu3_a = array[56+3-:4];
    M_alu3_b = 1'h1;
    M_alu3_alufn = 6'h01;
    tempOut1 = M_alu3_c;
    M_alu4_a = array[52+3-:4];
    M_alu4_b = tempOut1;
    M_alu4_alufn = 6'h33;
    tempOut2 = M_alu3_c;
    if (array[52+3-:4] == array[56+3-:4] - 1'h1) begin
      out[22+0-:1] = 1'h1;
    end else begin
      out[22+0-:1] = 1'h0;
    end
    if (array[48+3-:4] == array[52+3-:4] - 1'h1) begin
      out[21+0-:1] = 1'h1;
    end else begin
      out[21+0-:1] = 1'h0;
    end
    if (array[44+3-:4] == array[60+3-:4] - 3'h4) begin
      out[20+0-:1] = 1'h1;
    end else begin
      out[20+0-:1] = 1'h0;
    end
    if (array[40+3-:4] == array[56+3-:4] - 3'h4) begin
      out[19+0-:1] = 1'h1;
    end else begin
      out[19+0-:1] = 1'h0;
    end
    if (array[36+3-:4] == array[52+3-:4] - 3'h4) begin
      out[18+0-:1] = 1'h1;
    end else begin
      out[18+0-:1] = 1'h0;
    end
    if (array[32+3-:4] == array[48+3-:4] - 3'h4) begin
      out[17+0-:1] = 1'h1;
    end else begin
      out[17+0-:1] = 1'h0;
    end
    if (array[40+3-:4] == array[44+3-:4] - 1'h1) begin
      out[16+0-:1] = 1'h1;
    end else begin
      out[16+0-:1] = 1'h0;
    end
    if (array[36+3-:4] == array[40+3-:4] - 1'h1) begin
      out[15+0-:1] = 1'h1;
    end else begin
      out[15+0-:1] = 1'h0;
    end
    if (array[32+3-:4] == array[36+3-:4] - 1'h1) begin
      out[14+0-:1] = 1'h1;
    end else begin
      out[14+0-:1] = 1'h0;
    end
    if (array[28+3-:4] == array[44+3-:4] - 3'h4) begin
      out[13+0-:1] = 1'h1;
    end else begin
      out[13+0-:1] = 1'h0;
    end
    if (array[24+3-:4] == array[40+3-:4] - 3'h4) begin
      out[12+0-:1] = 1'h1;
    end else begin
      out[12+0-:1] = 1'h0;
    end
    if (array[20+3-:4] == array[36+3-:4] - 3'h4) begin
      out[11+0-:1] = 1'h1;
    end else begin
      out[11+0-:1] = 1'h0;
    end
    if (array[16+3-:4] == array[32+3-:4] - 3'h4) begin
      out[10+0-:1] = 1'h1;
    end else begin
      out[10+0-:1] = 1'h0;
    end
    if (array[24+3-:4] == array[28+3-:4] - 1'h1) begin
      out[9+0-:1] = 1'h1;
    end else begin
      out[9+0-:1] = 1'h0;
    end
    if (array[20+3-:4] == array[24+3-:4] - 1'h1) begin
      out[8+0-:1] = 1'h1;
    end else begin
      out[8+0-:1] = 1'h0;
    end
    if (array[16+3-:4] == array[20+3-:4] - 1'h1) begin
      out[7+0-:1] = 1'h1;
    end else begin
      out[7+0-:1] = 1'h0;
    end
    if (array[12+3-:4] == array[28+3-:4] - 3'h4) begin
      out[6+0-:1] = 1'h1;
    end else begin
      out[6+0-:1] = 1'h0;
    end
    if (array[8+3-:4] == array[24+3-:4] - 3'h4) begin
      out[5+0-:1] = 1'h1;
    end else begin
      out[5+0-:1] = 1'h0;
    end
    if (array[4+3-:4] == array[20+3-:4] - 3'h4) begin
      out[4+0-:1] = 1'h1;
    end else begin
      out[4+0-:1] = 1'h0;
    end
    if (array[0+3-:4] == array[16+3-:4] - 3'h4) begin
      out[3+0-:1] = 1'h1;
    end else begin
      out[3+0-:1] = 1'h0;
    end
    if (array[8+3-:4] == array[12+3-:4] - 1'h1) begin
      out[2+0-:1] = 1'h1;
    end else begin
      out[2+0-:1] = 1'h0;
    end
    if (array[4+3-:4] == array[8+3-:4] - 1'h1) begin
      out[1+0-:1] = 1'h1;
    end else begin
      out[1+0-:1] = 1'h0;
    end
    if (array[0+3-:4] == array[4+3-:4] - 1'h1) begin
      out[0+0-:1] = 1'h1;
    end else begin
      out[0+0-:1] = 1'h0;
    end
  end
endmodule
